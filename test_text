from smb.SMBConnection import SMBConnection
import boto3
import zipfile
import os
import re
from pyspark.sql import SparkSession

# Configurations
SMB_SERVER = "smb.mylocation.com"
SMB_SHARE_NAME = "shared"
SMB_FOLDER = "/folder1/folder2"
SMB_USERNAME = "your_username"
SMB_PASSWORD = "your_password"
SMB_DOMAIN = ""
S3_BUCKET = "my_s3bucket"
S3_DIR = "s3dir1/s3dir2"
ZIP_FILE_PREFIX = "myzipfile_"
EXCEL_FILE_PREFIX = "my_file_prefix_abc_xcy"
DYNAMODB_TABLE = "ProcessedFiles"
LOCAL_DOWNLOAD_PATH = "/tmp/"

def find_zip_file(smb_server, share_name, folder, username, password, prefix):
    """Find the ZIP file with the specified prefix."""
    conn = SMBConnection(username, password, "", "", domain="", use_ntlm_v2=True)
    conn.connect(smb_server, 139)

    files = conn.listPath(share_name, folder)
    for file in files:
        if file.filename.startswith(prefix) and file.filename.endswith(".zip"):
            print(f"Found ZIP file: {file.filename}")
            return file.filename
    conn.close()
    raise FileNotFoundError(f"No ZIP file found with prefix {prefix}")


def download_from_smb(smb_server, share_name, folder, filename, username, password, local_path):
    """Download file from SMB share."""
    conn = SMBConnection(username, password, "", "", domain="", use_ntlm_v2=True)
    conn.connect(smb_server, 139)

    with open(local_path, "wb") as file_obj:
        conn.retrieveFile(share_name, f"{folder}/{filename}", file_obj)
    conn.close()
    print(f"Downloaded {filename} to {local_path}")


def extract_excel_file(zip_path, prefix):
    """Extract the desired Excel file from the ZIP."""
    with zipfile.ZipFile(zip_path, "r") as zip_ref:
        for file_name in zip_ref.namelist():
            if file_name.startswith(prefix) and file_name.endswith(".xlsx"):
                extracted_path = f"/tmp/{file_name}"
                zip_ref.extract(file_name, "/tmp")
                print(f"Extracted {file_name} to {extracted_path}")
                return extracted_path
    raise FileNotFoundError(f"No file matching prefix {prefix} and .xlsx extension found in the ZIP.")


def upload_to_s3(local_file_path, bucket_name, s3_key):
    """Upload a file to S3."""
    s3 = boto3.client("s3")
    s3.upload_file(local_file_path, bucket_name, s3_key)
    print(f"Uploaded {local_file_path} to s3://{bucket_name}/{s3_key}")


def read_excel_with_spark(spark, file_path):
    """Read an Excel file using Spark."""
    df = spark.read.format("com.crealytics.spark.excel") \
        .option("header", "true") \
        .option("inferSchema", "true") \
        .load(file_path)
    df.show()  # For debugging
    return df


def write_to_postgresql(df, db_url, db_properties, table_name):
    """Write Spark DataFrame to PostgreSQL."""
    df.write \
        .jdbc(url=db_url, table=table_name, mode="append", properties=db_properties)
    print(f"Data written to PostgreSQL table {table_name}")


def main():
    # Initialize Spark session
    spark = SparkSession.builder \
        .appName("Process Excel File from ZIP") \
        .getOrCreate()

    # Step 1: Find the ZIP file in SMB
    try:
        zip_file_name = find_zip_file(
            smb_server=SMB_SERVER,
            share_name=SMB_SHARE_NAME,
            folder=SMB_FOLDER,
            username=SMB_USERNAME,
            password=SMB_PASSWORD,
            prefix=ZIP_FILE_PREFIX
        )
    except FileNotFoundError as e:
        print(e)
        return

    # Step 2: Download ZIP file from SMB
    local_zip_path = os.path.join(LOCAL_DOWNLOAD_PATH, zip_file_name)
    try:
        download_from_smb(
            smb_server=SMB_SERVER,
            share_name=SMB_SHARE_NAME,
            folder=SMB_FOLDER,
            filename=zip_file_name,
            username=SMB_USERNAME,
            password=SMB_PASSWORD,
            local_path=local_zip_path,
        )
    except Exception as e:
        print(f"Failed to download ZIP file: {e}")
        return

    # Step 3: Extract Excel file from ZIP
    try:
        extracted_excel_file = extract_excel_file(local_zip_path, EXCEL_FILE_PREFIX)
    except FileNotFoundError as e:
        print(e)
        return

    # Step 4: Upload extracted file to S3
    s3_key = f"{S3_DIR}/{os.path.basename(extracted_excel_file)}"
    upload_to_s3(extracted_excel_file, S3_BUCKET, s3_key)

    # Step 5: Read the Excel file with Spark
    try:
        df = read_excel_with_spark(spark, extracted_excel_file)
    except Exception as e:
        print(f"Failed to read Excel file: {e}")
        return

    # Step 6: Write data to PostgreSQL
    DB_URL = "jdbc:postgresql://db_host:5432/db_name"
    DB_PROPERTIES = {"user": "db_user", "password": "db_password", "driver": "org.postgresql.Driver"}
    TABLE_NAME = "mytable1"

    try:
        write_to_postgresql(df, DB_URL, DB_PROPERTIES, TABLE_NAME)
    except Exception as e:
        print(f"Failed to write data to PostgreSQL: {e}")
        return


if __name__ == "__main__":
    main()
