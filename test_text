-- To identify bloated tables in a PostgreSQL database without installing any external tools

WITH table_stats AS (
    SELECT
        schemaname,
        tablename,
        reltuples::BIGINT AS est_rows,
        relpages::BIGINT AS est_pages,
        pg_table_size(c.oid) AS table_size,
        pg_relation_size(c.oid) AS data_size,
        pg_total_relation_size(c.oid) AS total_size,
        (pg_total_relation_size(c.oid) - pg_relation_size(c.oid)) AS bloat_size
    FROM
        pg_class c
    JOIN
        pg_namespace n ON n.oid = c.relnamespace
    JOIN
        pg_stat_all_tables t ON t.relid = c.oid
    WHERE
        n.nspname = 'schema1'
        AND c.relkind = 'r' -- Regular tables only
),
bloat_estimates AS (
    SELECT
        schemaname,
        tablename,
        est_rows,
        est_pages,
        table_size,
        data_size,
        total_size,
        bloat_size,
        CASE
            WHEN table_size > 0 THEN (bloat_size * 100.0 / table_size)
            ELSE 0
        END AS bloat_percentage
    FROM table_stats
)
SELECT
    schemaname,
    tablename,
    pg_size_pretty(table_size) AS total_table_size,
    pg_size_pretty(data_size) AS data_size,
    pg_size_pretty(bloat_size) AS bloat_size,
    bloat_percentage
FROM
    bloat_estimates
ORDER BY
    bloat_percentage DESC
LIMIT 20;

-- To check for bloat in indexes

WITH index_stats AS (
    SELECT
        n.nspname AS schemaname,
        c.relname AS indexname,
        t.relname AS tablename,
        pg_relation_size(c.oid) AS index_size,
        (pg_relation_size(c.oid) - (pg_stat.get_live_tuples(c.oid) * pg_index_tuple_estimate(c.oid))) AS bloat_size,
        CASE
            WHEN pg_relation_size(c.oid) > 0 THEN
                ((pg_relation_size(c.oid) - (pg_stat.get_live_tuples(c.oid) * pg_index_tuple_estimate(c.oid))) * 100.0 / pg_relation_size(c.oid))
            ELSE 0
        END AS bloat_percentage
    FROM
        pg_class c
    JOIN
        pg_namespace n ON n.oid = c.relnamespace
    JOIN
        pg_index i ON i.indexrelid = c.oid
    JOIN
        pg_class t ON i.indrelid = t.oid
    WHERE
        n.nspname = 'schema1'
        AND c.relkind = 'i' -- Only indexes
),
index_bloat_summary AS (
    SELECT
        schemaname,
        indexname,
        tablename,
        index_size,
        bloat_size,
        bloat_percentage
    FROM index_stats
    WHERE bloat_size > 0
)
SELECT
    schemaname,
    indexname,
    tablename,
    pg_size_pretty(index_size) AS total_index_size,
    pg_size_pretty(bloat_size) AS index_bloat_size,
    bloat_percentage
FROM
    index_bloat_summary
ORDER BY
    bloat_percentage DESC
LIMIT 20;

-- Query to Find the Biggest Tables and Their Bloat
WITH table_stats AS (
    SELECT
        n.nspname AS schemaname,
        c.relname AS tablename,
        pg_table_size(c.oid) AS total_table_size,
        pg_relation_size(c.oid) AS data_size,
        pg_total_relation_size(c.oid) - pg_relation_size(c.oid) AS bloat_size,
        CASE
            WHEN pg_table_size(c.oid) > 0 THEN
                (pg_total_relation_size(c.oid) - pg_relation_size(c.oid)) * 100.0 / pg_table_size(c.oid)
            ELSE
                0
        END AS bloat_percentage
    FROM
        pg_class c
    JOIN
        pg_namespace n ON n.oid = c.relnamespace
    WHERE
        c.relkind = 'r' -- Only regular tables
        AND n.nspname NOT IN ('pg_catalog', 'information_schema') -- Exclude system schemas
)
SELECT
    schemaname,
    tablename,
    pg_size_pretty(total_table_size) AS total_table_size,
    pg_size_pretty(bloat_size) AS bloat_size,
    bloat_percentage
FROM
    table_stats
ORDER BY
    total_table_size DESC
LIMIT 10;

--Query to Find the Biggest Indexes and Their Bloat
WITH index_stats AS (
    SELECT
        n.nspname AS schemaname,
        c.relname AS indexname,
        t.relname AS tablename,
        pg_relation_size(c.oid) AS index_size,
        pg_relation_size(c.oid) - (pg_stat.get_live_tuples(c.oid) * pg_index_tuple_estimate(c.oid)) AS bloat_size,
        CASE
            WHEN pg_relation_size(c.oid) > 0 THEN
                ((pg_relation_size(c.oid) - (pg_stat.get_live_tuples(c.oid) * pg_index_tuple_estimate(c.oid))) * 100.0 / pg_relation_size(c.oid))
            ELSE
                0
        END AS bloat_percentage
    FROM
        pg_class c
    JOIN
        pg_namespace n ON n.oid = c.relnamespace
    JOIN
        pg_index i ON i.indexrelid = c.oid
    JOIN
        pg_class t ON i.indrelid = t.oid
    WHERE
        c.relkind = 'i' -- Only indexes
        AND n.nspname NOT IN ('pg_catalog', 'information_schema') -- Exclude system schemas
)
SELECT
    schemaname,
    indexname,
    tablename,
    pg_size_pretty(index_size) AS total_index_size,
    pg_size_pretty(bloat_size) AS index_bloat_size,
    bloat_percentage
FROM
    index_stats
ORDER BY
    index_size DESC
LIMIT 10;


-- To find the biggest tables in terms of row estimates, table size, index size, and total size
SELECT
    n.nspname AS schemaname,
    c.relname AS tablename,
    pg_size_pretty(pg_table_size(c.oid)) AS table_size, -- Table data size
    pg_size_pretty(pg_indexes_size(c.oid)) AS index_size, -- Indexes size
    pg_size_pretty(pg_total_relation_size(c.oid)) AS total_size, -- Total size (table + indexes + TOAST)
    c.reltuples::BIGINT AS row_estimate -- Estimated number of rows
FROM
    pg_class c
JOIN
    pg_namespace n ON n.oid = c.relnamespace
WHERE
    c.relkind = 'r' -- Regular tables only
    AND n.nspname NOT IN ('pg_catalog', 'information_schema') -- Exclude system schemas
ORDER BY
    pg_total_relation_size(c.oid) DESC -- Sort by total size
LIMIT 10; -- Get the top 10 biggest tables


-- analyze more details about indexes, you can join with pg_index or run a separate query
SELECT
    n.nspname AS schemaname,
    c.relname AS indexname,
    pg_size_pretty(pg_relation_size(c.oid)) AS index_size,
    t.relname AS tablename
FROM
    pg_class c
JOIN
    pg_namespace n ON n.oid = c.relnamespace
JOIN
    pg_index i ON i.indexrelid = c.oid
JOIN
    pg_class t ON i.indrelid = t.oid
WHERE
    c.relkind = 'i' -- Only indexes
    AND n.nspname NOT IN ('pg_catalog', 'information_schema')
ORDER BY
    pg_relation_size(c.oid) DESC
LIMIT 10;


-- Bloat of table using pgstattuple
SELECT
    st.schemaname,
    st.relname AS tablename,
    pg_size_pretty(pg_relation_size(st.relid)) AS total_size, -- Total size of the table
    pg_size_pretty(pgstattuple.tuple_len) AS live_data, -- Size of live tuples
    pg_size_pretty(pgstattuple.dead_tuple_len) AS dead_data, -- Size of dead tuples
    pgstattuple.dead_tuple_percent AS dead_tuple_percent, -- Percentage of dead tuples
    pg_size_pretty(pgstattuple.free_space) AS free_space, -- Free space available
    pgstattuple.free_percent AS free_percent -- Percentage of free space
FROM
    pg_stat_all_tables st
JOIN pg_class c ON c.oid = st.relid
CROSS JOIN LATERAL pgstattuple(st.relid) AS pgstattuple
WHERE
    st.schemaname NOT IN ('pg_catalog', 'information_schema') -- Exclude system schemas
    AND c.relispartition = FALSE -- Exclude partitioned tables
ORDER BY
    pgstattuple.dead_tuple_percent DESC -- Order by percentage of dead tuples
LIMIT 10;

-- Bloat of index using pgstattuple
SELECT
    n.nspname AS schemaname,
    c.relname AS indexname,
    t.relname AS tablename,
    pg_size_pretty(pg_relation_size(c.oid)) AS total_size, -- Total size of the index
    pg_size_pretty(pgstattuple.tuple_len) AS live_data, -- Size of live tuples in the index
    pg_size_pretty(pgstattuple.dead_tuple_len) AS dead_data, -- Size of dead tuples in the index
    pgstattuple.dead_tuple_percent AS dead_tuple_percent, -- Percentage of dead tuples in the index
    pg_size_pretty(pgstattuple.free_space) AS free_space, -- Free space in the index
    pgstattuple.free_percent AS free_percent -- Percentage of free space in the index
FROM
    pg_class c
JOIN pg_namespace n ON n.oid = c.relnamespace
JOIN pg_index i ON i.indexrelid = c.oid
JOIN pg_class t ON i.indrelid = t.oid
CROSS JOIN LATERAL pgstattuple(c.oid) AS pgstattuple
WHERE
    n.nspname NOT IN ('pg_catalog', 'information_schema') -- Exclude system schemas
ORDER BY
    pgstattuple.dead_tuple_percent DESC -- Order by percentage of dead tuples
LIMIT 10;

