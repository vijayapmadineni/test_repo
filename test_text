import smbclient
import boto3
import os

# S3 Configuration
s3_bucket = "my_s3_bucket"
s3_outgoing_key = "vendor/outgoing/out_going_file.txt"
s3_incoming_key = "vendor/incoming/file_incoming.txt"

# FSx Configuration
fsx_ip = "10.152.10.123"
share_name = "share_1"
folder_name = "test_folder"
domain = "YOUR_DOMAIN"
username = "YOUR_USERNAME"
password = "YOUR_PASSWORD"

# Temporary Local Paths
local_outgoing_file = "/tmp/out_going_file.txt"
local_incoming_file = "/tmp/file_incoming.txt"

# Initialize S3 Client
s3 = boto3.client("s3")

# Configure SMB Client
smbclient.ClientConfig(username=username, password=password, domain=domain)

def upload_to_smb_from_s3():
    try:
        # Download file from S3 to local
        s3.download_file(s3_bucket, s3_outgoing_key, local_outgoing_file)
        print(f"Downloaded {s3_outgoing_key} from S3 to {local_outgoing_file}")

        # Upload local file to SMB
        smb_path = f"\\\\{fsx_ip}\\{share_name}\\{folder_name}\\out_going_file.txt"
        with smbclient.open_file(smb_path, mode="wb") as smb_file:
            with open(local_outgoing_file, "rb") as local_file:
                smb_file.write(local_file.read())
        print(f"Uploaded {local_outgoing_file} to SMB at {smb_path}")

    except Exception as e:
        print(f"Error uploading to SMB: {e}")
        raise
    finally:
        # Clean up temporary file
        if os.path.exists(local_outgoing_file):
            os.remove(local_outgoing_file)

def download_from_smb_to_s3():
    try:
        # Define SMB file path
        smb_path = f"\\\\{fsx_ip}\\{share_name}\\{folder_name}\\file_incoming.txt"

        # Download file from SMB to local
        with smbclient.open_file(smb_path, mode="rb") as smb_file:
            with open(local_incoming_file, "wb") as local_file:
                local_file.write(smb_file.read())
        print(f"Downloaded {smb_path} to {local_incoming_file}")

        # Upload local file to S3
        s3.upload_file(local_incoming_file, s3_bucket, s3_incoming_key)
        print(f"Uploaded {local_incoming_file} to S3 at {s3_incoming_key}")

    except Exception as e:
        print(f"Error downloading from SMB: {e}")
        raise
    finally:
        # Clean up temporary file
        if os.path.exists(local_incoming_file):
            os.remove(local_incoming_file)

if __name__ == "__main__":
    # Upload file from S3 to SMB
    upload_to_smb_from_s3()

    # Download file from SMB to S3
    download_from_smb_to_s3()
