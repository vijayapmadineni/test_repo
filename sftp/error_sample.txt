import requests
from datetime import datetime

# Global variables to store token and its expiration datetime
ACCESS_TOKEN = None
TOKEN_EXPIRATION = None

def parse_expiration(expiration_str):
    """Parse the expiration datetime string to a datetime object"""
    return datetime.strptime(expiration_str, '%m-%d-%y %H:%M:%S')

def get_token(url, headers):
    """Get a new token from the API and update global variables"""
    global ACCESS_TOKEN, TOKEN_EXPIRATION

    response = requests.get(url, headers=headers)
    if response.status_code == 200:
        token_response = response.json()
        ACCESS_TOKEN = token_response.get('access_token')
        expiration_str = token_response.get('expires_in')  # This should now be a datetime string
        TOKEN_EXPIRATION = parse_expiration(expiration_str)
        return ACCESS_TOKEN
    else:
        raise Exception(f"Failed to retrieve token. Status: {response.status_code}, Reason: {response.reason}")

def token_valid():
    """Check if the token is still valid by comparing the current datetime to the expiration"""
    return ACCESS_TOKEN and (datetime.now() < TOKEN_EXPIRATION)

def post_data(post_url, data, url, headers):
    """Post data using the access token, refresh token if necessary, with a retry on failure due to token expiration"""
    global ACCESS_TOKEN

    if not token_valid():
        print("Token is expired or missing. Refreshing token...")
        get_token(url, headers)
    
    auth_headers = {
        'Authorization': f'Bearer {ACCESS_TOKEN}'
    }
    response = requests.post(post_url, json=data, headers=auth_headers)

    # Check if the token was possibly expired and retry once
    if response.status_code == 401:  # Typically 401 status indicates an authentication issue, which could mean expired token
        print("Authentication failed, possibly due to expired token. Retrying...")
        get_token(url, headers)  # Refresh token
        auth_headers['Authorization'] = f'Bearer {ACCESS_TOKEN}'
        response = requests.post(post_url, json=data, headers=auth_headers)  # Retry posting data
    
    if response.status_code == 200:
        print("Data posted successfully.")
        return response.json()
    else:
        print(f"Failed to post data. Status: {response.status_code}, Reason: {response.reason}")
        return None

# Define headers and URL for the token
headers = {
    'client_id': 'xxxx_client_id',
    'client_secret': 'xxxxx_client_secret',
    'application_id': 'xxxxxx_application_id',
    'username': 'username@username.com',
    'password': 'pass_word',
    'scope': 'user.read'
}
token_url = 'https://location.com'

# Example data and post URL
data_to_post = {'key': 'value'}
post_url = 'https://api.example.com/data'

# Post data using the functions
post_data(post_url, data_to_post, token_url, headers)







###############################################################################################################################


import requests
import json
import base64

def encode_file_to_base64(filepath):
    """Read file and encode its contents to base64."""
    with open(filepath, "rb") as file:
        encoded_string = base64.b64encode(file.read()).decode('utf-8')
    return encoded_string

# Define the URL and headers
url = 'https://hf-edr-services-rt.us-e1.cloudhub.io/v1/documents'
headers = {
    'client_id': '{{applicationId}}',  # Replace '{{applicationId}}' with your actual application ID
    'Content-Type': 'application/json'
}

# Encode the PDF file to base64
file_path = 'DEV-12055127.pdf'  # Ensure this path points to the correct file
document_stream = encode_file_to_base64(file_path)

# Define the JSON data payload
data = {
    "DocumentProperties": {
        "CustomerType": "Provider",
        "DocumentCategory": "Payment_Integrity_Letter",
        "DocumentTypeName": "Subrogation_Letter",
        "DocumentDate": "2021-07-23",
        "DocumentID": "DEV-12055127",
        "DocumentName": "DEV-12055127.pdf",
        "Description": "DHP Letters data updated"
    },
    "DocumentContent": {
        "DocumentStream": document_stream
    },
    "DocumentAttribute": [
        {
            "AttributeName": "hf:Provider_ID",
            "AttributeValue": "1234"
        }
    ]
}

# Convert the data dictionary to a JSON formatted string
json_data = json.dumps(data)

# Send the POST request
response = requests.post(url, headers=headers, data=json_data)

# Check the response
if response.status_code == 200:
    print("Request successful:", response.text)
else:
    print("Failed to send request. Status code:", response.status_code, "Response:", response.text)
